# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: make application.yml
        run: |
          ## create application-database.yaml
          cd ./src/main/resources

          # application-database.yaml 파일 생성
          touch ./application.yml

          # GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기
          echo "${{ secrets.DATABASE }}" >> ./application.yml
        shell: bash
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/opgg .
          docker push ${{ secrets.DOCKER_REPO }}/opgg

      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          ##key: ${{ secrets.KEY }}
          script: |
            sudo docker stop opgg
            sudo docker rm -f opgg
            sudo docker pull ${{ secrets.DOCKER_REPO }}/opgg
            cd ../
            cd var/
            cd opgg_api/
            docker-compose up -d
            docker image prune -f
